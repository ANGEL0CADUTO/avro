#    Licensed to the Apache Software Foundation (ASF) under one
#    or more contributor license agreements.  See the NOTICE file
#    distributed with this work for additional information
#    regarding copyright ownership.  The ASF licenses this file
#    to you under the Apache License, Version 2.0 (the
#    "License"); you may not use this file except in compliance
#    with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing,
#    software distributed under the License is distributed on an
#
#    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#    KIND, either express or implied.  See the License for the
#    specific language governing permissions and limitations
#    under the License.

# Nome del workflow, che apparirà su GitHub
name: Java CI for Avro

# Trigger: quando eseguire questo workflow
on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

# Lavori da eseguire
jobs:
  build:
    # Il tipo di macchina virtuale su cui eseguire il lavoro (Linux)
    runs-on: ubuntu-latest

    steps:
      # 1. Scarica il codice del tuo repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Imposta l'ambiente Java con TUTTI i JDK necessari
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Set up JDK 21 (and cache Maven dependencies)
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven # La cache la mettiamo solo una volta, sull'ultimo JDK

      # 3. Crea il file toolchains.xml per Maven
      - name: Configure Maven toolchains
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/toolchains.xml <<EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <toolchains>
            <toolchain>
              <type>jdk</type>
              <provides><version>11</version></provides>
              <configuration><jdkHome>${{ env.JAVA_HOME_11_X64 }}</jdkHome></configuration>
            </toolchain>
            <toolchain>
              <type>jdk</type>
              <provides><version>17</version></provides>
              <configuration><jdkHome>${{ env.JAVA_HOME_17_X64 }}</jdkHome></configuration>
            </toolchain>
            <toolchain>
              <type>jdk</type>
              <provides><version>21</version></provides>
              <configuration><jdkHome>${{ env.JAVA_HOME_21_X64 }}</jdkHome></configuration>
            </toolchain>
          </toolchains>
          EOL

      # 4. Esegui il build con Maven
      # Maven ora troverà tutti i JDK di cui ha bisogno grazie al file toolchains.xml
      - name: Build Avro with Maven
        run: mvn -B clean install